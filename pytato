#!/usr/local/bin/python3
import six
import os
import argparse
import subprocess


def read_args():
    """
    Method handles reading in all of the arguments
    """
    example_text = """
    For an environment located in ~/env/dev/.venv:
    pytato dev -r
    pytato dev -s script.py

    For an environment located in non-default location: [/path/to/env/dev/.venv]
    pytato -p /path/to/env dev -r
    pytato -p /path/to/env dev -s script.py

    To move to a environments directory:
    cd $(pytato dev) -> cd ~/env/dev
    cd $(pytato -p ~/path/ env) -> cd ~/path/env

    Adding an existing environment to pytato:
    pytato new_env -a /path/to/existing/env
    This will create a softlink in the default path location to
    this new environment.

    Editing a Pipfile in a pytato environment:
    pytato dev -e
    This will open up the Pipfile in VIM for editing.

    Updating an environment in pytato:
    pytato dev -u
    In this example, this will run 'pipenv update' within the directory of the dev environment.
    """
    parser = argparse.ArgumentParser(description="",
        epilog=example_text,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    group = parser.add_mutually_exclusive_group()
    group.add_argument("-r", "--repl", action="store_true",
        help="Use to activate a ptpython REPL in selected environment. Cannot use this with -s option."
    )
    group.add_argument("-s", "--script", dest="script",
        help="Supply a script to run in the virtual environment chosen. Cannot use this with -r option."
    )
    group.add_argument("-a", "--add-environment", dest="add_environment",
        help="Supply the path to a directory that contains a .venv file"
    )

    group.add_argument("-u", "--update", action="store_true",
        help="Use this to run pipenv update in the supplied environment."
    )

    group.add_argument("-e", "--edit", action="store_true",
        help="Use this to open up the Pipefile in VIM and make edits"
    )

    parser.add_argument("env",
        help="Environment to activate. By default this is a directory name after ~/env/ that contains a .venv directory. "
        "Should be a directory name following your path argument if default path is not present. "
        "Example: if env=dev then ~/env/dev/.venv should exist.", default='dev'
    )
    parser.add_argument("-p", "--path", dest="path",
        help="The path to where your virtual environments are located. ~/env/ by default",
        default="~/env/"
    )
    return parser.parse_args()


def run_script(path, script):
    """
    Function is used to run a script under whichever python interpreter you choose.
    """
    # path to a python interpreter that runs any python script
    python_bin = "{}/.venv/bin/python3".format(path)

    # path to the script that must run under the virtualenv
    process = subprocess.Popen([python_bin, script])
    process.communicate()

def add_environment(virtual_envs, path):
    # Verify existence of .venv
    environment_location = os.path.abspath(os.path.expanduser(path))
    env_file = environment_location+"/.venv"
    if not os.path.exists(env_file):
        print("Environment {} does not exist!".format(env_file))
    else:
        print("New environment located at: {}".format(env_file))
        # Create a softlink in ~/env/ -> env_file
        print("ln -s {} {}".format(environment_location, virtual_envs))
        os.system("ln -s {} {}".format(environment_location, virtual_envs))

def update_environment(path):
    if not os.path.exists(path):
        print("Environment not found!")
    else:
        os.system("cd {};pipenv update".format(path))
    pass

def edit_environment(path):
    if not os.path.exists(path):
        print("Environment not found!")
    else:
        os.system("vim {}/Pipfile".format(path))
    pass

def spawn_ptpython(path):
    """
    A bit complex, this function will activate a virtual environment and spawn an embedded ptpython shell within that environment"
    """
    activate_this_file = "{}/.venv/bin/activate_this.py".format(path)
    activate_this_file = os.path.expanduser(activate_this_file)
    if not os.path.exists(activate_this_file):
        print("No .venv directory found in virtual environment! Unable to activate.")
        exit(1)
    exec(compile(open(activate_this_file, "rb").read(), activate_this_file, 'exec'), dict(__file__=activate_this_file))

    from ptpython.repl import embed

    config_file = '~/.ptpython/config.py'
    config_file = os.path.expanduser(config_file)
    namespace = {}
    if os.path.exists(config_file):
        with open(config_file, 'rb') as f:
            code = compile(f.read(), config_file, 'exec')
            six.exec_(code, namespace, namespace)

    # Spawn Shell
    embed(globals=globals(), locals=locals(), configure=namespace.get('configure'))


def main():
    args = read_args()
    # will fix ~ as well as absolute paths. resulting path will not have a "/" at the end.
    path_to_env_dir = os.path.abspath(os.path.expanduser(args.path))
    env_path = "{}/{}".format(path_to_env_dir, args.env)

    if not args.add_environment and not os.path.exists(env_path):
        print("Path to {} environment does not exist!".format(args.env))
        exit(1)

    if args.repl:
        spawn_ptpython(env_path)
        exit(0)
    elif args.script is not None:
        script = args.script
        script = os.path.abspath(os.path.expanduser(script))
        if not os.path.exists(script):
            print("Script not found!")
            exit(1)
        else:
            run_script(env_path, script)
            exit(0)
    elif args.add_environment is not None:
        add_environment(env_path, args.add_environment)
    elif args.update:
        update_environment(env_path)
    elif args.edit:
        edit_environment(env_path)
    else:
        print("{}".format(env_path))

if __name__=='__main__':
    main()
    
