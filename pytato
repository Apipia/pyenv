#!/usr/local/bin/python3
import six
import os
import argparse
import subprocess


def read_args():
    """
    Method handles reading in all of the arguments
    """
    example_text = """
    For an environment located in ~/env/dev/.venv:
    pytato dev -r
    pytato dev -s script.py

    For an environment located in non-default location: [/path/to/env/dev/.venv]
    pytato -p /path/to/env dev -r
    pytato -p /path/to/env dev -s script.py

    To move to a environments directory:
    cd $(pytato dev) -> cd ~/env/dev
    cd $(pytato -p ~/path/ env) -> cd ~/path/env
    """
    parser = argparse.ArgumentParser(description="", epilog=example_text, formatter_class=argparse.RawDescriptionHelpFormatter)
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-r", "--repl", action="store_true", help="Use to activate a ptpython REPL in selected environment. Cannot use this with -s option.")
    group.add_argument("-s", "--script", dest="script", help="Supply a script to run in the virtual environment chosen. Cannot use this with -r option.")
    parser.add_argument("env", help="Environment to activate. By default this is a directory name after ~/env/ that contains a .venv directory. "
                        "Should be a directory name following your path argument if default path is not present. "
                        "Example: if env=dev then ~/env/dev/.venv should exist.", default='dev')
    parser.add_argument("-p", "--path", dest="path", help="The path to where your virtual environments are located. ~/env/ by default",
                        default="~/env/")
    return parser.parse_args()


def run_script(path, script):
    """
    Function is used to run a script under whichever python interpreter you choose.
    """
    # path to a python interpreter that runs any python script
    python_bin = "{}/.venv/bin/python3".format(path)

    # path to the script that must run under the virtualenv
    subprocess.Popen([python_bin, script])


def spawn_ptpython(path):
    """
    A bit complex, this function will activate a virtual environment and spawn an embedded ptpython shell within that environment"
    """
    activate_this_file = "{}/.venv/bin/activate_this.py".format(path)
    activate_this_file = os.path.expanduser(activate_this_file)
    if not os.path.exists(activate_this_file):
        print("No .venv directory found in virtual environment! Unable to activate.")
        exit(1)
    exec(compile(open(activate_this_file, "rb").read(), activate_this_file, 'exec'), dict(__file__=activate_this_file))

    # TODO: Check if import fails, possibly prompt user if they'd like to install ptpython.
    from ptpython.repl import embed

    config_file = '~/.ptpython/config.py'
    config_file = os.path.expanduser(config_file)
    namespace = {}
    if os.path.exists(config_file):
        with open(config_file, 'rb') as f:
            code = compile(f.read(), config_file, 'exec')
            six.exec_(code, namespace, namespace)

    # Spawn Shell
    embed(globals=globals(), locals=locals(), configure=namespace.get('configure'))


def main():
    args = read_args()
    # will fix ~ as well as absolute paths. resulting path will not have a "/" at the end.
    path_to_env_dir = os.path.abspath(os.path.expanduser(args.path))
    env_path = "{}/{}".format(path_to_env_dir, args.env)

    if not os.path.exists(env_path):
        print("Path to {} environment does not exist!".format(args.env))
        exit(1)

    if args.repl:
        spawn_ptpython(env_path)
        exit(0)
    elif args.script is not None:
        script = args.script
        script = os.path.abspath(os.path.expanduser(script))
        if not os.path.exists(script):
            print("Script not found!")
            exit(1)
        else:
            run_script(env_path, script)
            exit(0)
    else:
        print("{}".format(env_path))

if __name__=='__main__':
    main()
